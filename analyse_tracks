#!/usr/bin/env python3
import urllib.request
import urllib.parse
import urllib
import json, os, time, logging, itertools, argparse
from pprint import pprint
from utils import Timer

log = logging.getLogger('')


URL_UPLOAD = 'http://developer.echonest.com/api/v4/track/upload'
URL_GET_PROFILE = 'http://developer.echonest.com/api/v4/track/profile'


def urlopen(req, nb_retry=None):
    """ special urlopen for echonest
        nb_retry=None means infinit loop
    """
    retry = 0
    while nb_retry is None or retry < nb_retry:
        try:
            res = urllib.request.urlopen(req)
            break
        except urllib.error.HTTPError as e:
            log.warning('http error %i : %s', e.code, e.reason)
            if e.code == 429:
                log.info('we exceeded our API calls limit, waiting 61s')
                log.debug('error header : %s', e.headers)
                time.sleep(61)
                # start over
                retry = 0
                continue
            elif e.code == 400:
                log.info('perhaps wrong key?')
            delay = (retry + 1) ** 2
            log.info('retrying in %is', delay)
            time.sleep(delay)
        except Exception as e:
            delay = (retry + 1) ** 2
            log.exception('unhandled exception')
            log.info('retrying in %is', delay)
            time.sleep(delay)
        retry += 1
    else:
        log.error('even after %i retries we were unable to reach %s',
                  nb_retry, req.full_url)
        return None
    return res

def add_params_to_url(url, **params):
    params = urllib.parse.urlencode(params)
    url += '?' + params
    return url


def get_json_from_url(url):
    req = urllib.request.Request(url=url)
    res = urlopen(req)
    if res is None:
        return '{}'
    return json.loads(res.read().decode())


def post_track(apikey, filename):
    log.info('opening file %s', filename)
    trackdata = open(filename, 'rb').read()
    url = add_params_to_url(
        URL_UPLOAD,
        api_key=apikey,
        filetype=os.path.splitext(filename)[1][1:],
        format='json')
    req = urllib.request.Request(
        url = url,
        data = trackdata,
        headers = {'Content-Type': 'application/octet-stream'})

    log.info('sending file to echonest')
    res = urlopen(req)
    if res is None:
        log.error('we were unable to upload track %s', filename)

    response = json.loads(res.read().decode())
    msg = response['response']['status']['message']
    if msg != 'Success':
        log.error('echonest responded with %s', msg)
        log.error(pprint(response))
        return
    log.info('track successfuly sent')
    id = response['response']['track']['id']

    url = add_params_to_url(
        URL_GET_PROFILE,
        api_key=apikey,
        id=id,
        format='json',
        bucket='audio_summary')

    log.debug('waiting 2s to give a chance for the analysis to finish')
    time.sleep(2)

    log.info('fetching profile at %s', url)
    for retry in itertools.count():
        response = get_json_from_url(url)
        status = response['response']['track']['status']
        if status == 'complete':
            log.info('done!')
            full_analysis_url \
                = response['response']['track']['audio_summary']['analysis_url']
            break
        elif status == 'pending':
            delay = (retry + 1) ** 2
            log.info('waiting for the analysis to finish, trying again in %is',
                     delay)
            time.sleep(delay)
        else:
            log.error('analyse finished with status %s', status)
            break

    data = get_json_from_url(full_analysis_url)
    return data


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('files', nargs='+', help='audio files')
    parser.add_argument('--api-key', '-k', required=True,
                        help='your echonest api key')
    parser.add_argument('--verbose', '-v', default=2, type=int,
                        help='how verbose we want to be ([1-3])')
    parser.add_argument('--output-dir', '-o', help='output directory for the .json'
                        'files', required=True)
    args = parser.parse_args()

    verb_levels = {1:'WARNING',
                   2:'INFO',
                   3:'DEBUG'}
    logging.basicConfig(level=verb_levels[args.verbose])

    timer = Timer(len(args.files), print_if = lambda x:True)
    for i,f in enumerate(args.files):
        log.info('track #%i', i+1)
        base, ext = os.path.splitext(os.path.basename(f))
        data = post_track(args.api_key, f)
        with(open(os.path.join(args.output_dir, base + '.json'), 'w')) as output:
            output.write(json.dumps(data, indent=2))
        timer.update()
